**********FIBONACCI SERIES USING recursion**************
public class Recursion {
      public static int fib(int n) {
        if (n <= 1) return n;
        return fib(n - 1) + fib(n - 2);
    }
   public static void main(String[] args) {
        int n = 50; 
        long startTime = System.nanoTime(); 
         for (int i = 0; i < n; i++) {
            System.out.print(fib(i) + " ");
        }
        long endTime = System.nanoTime(); 
        System.out.println("\nExecution Time: " + (endTime - startTime) / 1_000_000 + " ms");
    }
}

**********FIBONACCI SERIES USING top down(Memoization)**************
import java.util.Arrays;
public class DP {

        public static long fib(int n, long dp[]) {
            if (n <= 1) return n;
            if (dp[n] != -1) return dp[n]; // Memoization check
            
            dp[n] = fib(n - 1, dp) + fib(n - 2, dp);
            return dp[n];
        }
    
        public static void main(String[] args) {
            int n = 50; 
            long dp[] = new long[n + 1];
            Arrays.fill(dp, -1); 
            long startTime = System.currentTimeMillis(); 
            System.out.print("Fibonacci Series: ");
            for (int i = 0; i < n; i++) {
                System.out.print(fib(i, dp) + " ");
            }
    
            long endTime = System.currentTimeMillis(); 
          System.out.println("\nExecution Time: " + (endTime - startTime) + " ms");
        }
    
     
}

**********FIBONACCI SERIES USING BottomUp(Tabulation)**************
public class DPBU {
        public static void main(String[] args) {
            int n = 50;
            long dp[] = new long[n + 1]; 
            long startTime = System.nanoTime(); 
            dp[0] = 0;
            dp[1] = 1;
    
            for (int i = 2; i < n; i++) {
                dp[i] = dp[i - 1] + dp[i - 2];
                System.out.print(dp[i] + " ");
            }
    
            long endTime = System.nanoTime();
              System.out.println("\nExecution Time: " + (endTime - startTime) / 1_000_000 + " ms");
        }
    }
    
    


    

