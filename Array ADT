Collections
List
    ArrayList
    Vector
    LinkedList


Feature                  	ArrayList üü¢	            Vector üîµ                        	LinkedList üü†
Structure                	Uses dynamic array      	Uses dynamic array	              Uses doubly linked list
Thread Safety	            ‚ùå Not synchronized      ‚úÖ Synchronized                 	‚ùå Not synchronized (not thread-safe)
Performance	              ‚úÖ Faster               	‚è≥ Slower            	            ‚ö° Fast insert/delete but slow access
Growth Rate	              Expands 50% when full	    Expands 2x when full	            Grows dynamically
Best Use Case	            ‚úÖ When fast access     	‚úÖ When thread safety is required	  ‚úÖ When frequent insertions/deletions are needed
Access Speed	             O(1) (random access)	     O(1) (random access)	            üê¢ O(n) (slow, sequential search)
Insert/Delete Speed	       O(n) (slow )	             O(n) (same as ArrayList)	         O(1) at head/tail, O(n) otherwise*******************************Array ADT - display , append, insert, delete*****************


***********************Array ADT - display, append, insert,delete*******************************
import java.util.ArrayList;

public class ArrList {
    public static void main(String[] args) {
        ArrayList<Integer> arr = new ArrayList<>();

        // Append elements
        arr.add(10);
        arr.add(20);
        arr.add(30);
        arr.add(40);
        System.out.println("Array: " + arr); // Output: [10, 20, 30, 40]

        // Insert element at index 2
        arr.add(2, 25);
        System.out.println("After insertion: " + arr); // Output: [10, 20, 25, 30, 40]

        // Delete element at index 3
        arr.remove(3);
        System.out.println("After deletion: " + arr); // Output: [10, 20, 25, 40]

    }
}
***********************Array ADT - get, set, search*******************************
import java.util.ArrayList;
import java.util.Collections;

public class ArrList1 {
    public static void main(String[] args) {
        ArrayList<Integer> arr = new ArrayList<>();

        // Append elements
        arr.add(10);
        arr.add(20);
        arr.add(30);
        arr.add(40);
        System.out.println("Array: " + arr); // Output: [10, 20, 30, 40]

        // // Get element at index 2
        // System.out.println("Element at index 2: " + arr.get(2)); // Output: 25

        // // Set (update) element at index 2
        // arr.set(2, 35);
        // System.out.println("After updating index 2: " + arr); // Output: [10, 20, 35, 40]

        // // Search for an element
        // int index = arr.indexOf(40);
        // System.out.println("Index of 40: " + index); // Output: 3
   }}
*******************************Array ADT - shift / rotate******************************
import java.util.ArrayList;
import java.util.Collections;

public class ArrList1 {
    public static void main(String[] args) {
        ArrayList<Integer> arr = new ArrayList<>();

        // Append elements
        arr.add(10);
        arr.add(20);
        arr.add(30);
        arr.add(40);
        System.out.println("Array: " + arr); // Output: [10, 20, 30, 40]
        
        // Left Rotate
        Collections.rotate(arr, -2);
        System.out.println("After left rotation: " + arr); // Output: [20, 35, 40, 10]

        // Right Rotate
        Collections.rotate(arr, 1);
        System.out.println("After right rotation: " + arr); // Output: [10, 20, 35, 40]

        
    }}



**********Methods of ArrayList, Vector, and LinkedList**********
Below are some common methods available in all three classes:

1. Common Methods (Available in All)
Method                  	Description
add(E e)              	Adds an element at the end.
add(int index, E e)	    Inserts an element at a specific index.
remove(int index)	      Removes an element at a specific index.
remove(Object o)	      Removes the first occurrence of a specified element.
get(int index)	        Retrieves an element at the specified index.
size()                	Returns the number of elements.
contains(Object o)	    Checks if an element exists.
indexOf(Object o)	      Returns the first index of an element.
clear()                	Removes all elements.

2. Unique Methods
Each class has some additional methods:

‚úÖ ArrayList & Vector (Methods not in LinkedList)
ensureCapacity(int minCapacity) ‚Äì Ensures minimum capacity.
trimToSize() ‚Äì Reduces size to match elements.

‚úÖ Vector-Specific Methods
capacity() ‚Äì Returns the current capacity.
firstElement() ‚Äì Returns the first element.
lastElement() ‚Äì Returns the last element.
removeElement(Object obj) ‚Äì Removes an element.

‚úÖ LinkedList-Specific Methods

addFirst(E e), addLast(E e) ‚Äì Adds elements at the beginning or end.
removeFirst(), removeLast() ‚Äì Removes first or last element.
getFirst(), getLast() ‚Äì Retrieves first or last element.
poll(), peek() ‚Äì Retrieves/removes elements from the head.

************Programs*************
Array Operation	        Manual Implementation	            Built-in Method
Append	                arr[size++] = value;	          ArrayList.add(value);
Insert	                Shift elements, then insert	    ArrayList.add(index, value);
Delete	                Shift elements left	            ArrayList.remove(index);
Get	                    arr[index]	                    ArrayList.get(index);
Update                    arr[index] = value;	            ArrayList.set(index, value);
Search	                Loop through array	            ArrayList.indexOf(value);
Shift Left	            Loop and shift	                System.arraycopy()
Shift Right            	Loop and shift	                Collections.rotate(arr, -1);
Rotate Left	            Loop and swap	                  Collections.rotate(arr, -1);
Rotate Right	          Loop and swap                  	Collections.rotate(arr, 1);

Inserting in a sorted Array and checking if an Array is sorted

Segregating positive and negative numbers

Merging two sorted arrays
