The String class represents character strings. All string literals in Java programs, such as "abc", are implemented as instances of this class.
Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example:

     String str = "abc";
 
is equivalent to:

     char data[] = {'a', 'b', 'c'};
     String str = new String(data);
 
Here are some more examples of how strings can be used:

     System.out.println("abc");
     String cde = "cde";
     System.out.println("abc" + cde);
     String c = "abc".substring(2,3);
     String d = cde.substring(1, 2);


Method Summary
 char	charAt(int index)
          Returns the character at the specified index.
 int	compareTo(Object o)
          Compares this String to another Object.
 int	compareTo(String anotherString)
          Compares two strings lexicographically.
 int	compareToIgnoreCase(String str)
          Compares two strings lexicographically ignoring case considerations.
 String	concat(String str)
          Concatenates the specified string to the end of this string.
static String	copyValueOf(char[] data, int offset, int count)
          Returns a String that is equivalent to the specified character array.
static String	copyValueOf(char[] data)
          Returns a String that is equivalent to the specified character array.
 boolean	endsWith(String suffix)
          Tests if this string ends with the specified suffix.
 boolean	equals(Object anObject)
          Compares this string to the specified object.
 boolean	equalsIgnoreCase(String anotherString)
          Compares this String to another object.
 byte[]	getBytes()
          Convert this String into bytes according to the platform's default character encoding, storing the result into a new byte array.
 void	getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)
          Deprecated. This method does not properly convert characters into bytes. As of JDK 1.1, the preferred way to do this is via the getBytes(String enc) method, which takes a character-encoding name, or the getBytes() method, which uses the platform's default encoding.
 byte[]	getBytes(String enc)
          Convert this String into bytes according to the specified character encoding, storing the result into a new byte array.
 void	getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
          Copies characters from this string into the destination character array.
 int	hashCode()
          Returns a hashcode for this string.
 int	indexOf(int ch, int fromIndex)
          Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index.
 int	indexOf(int ch)
          Returns the index within this string of the first occurrence of the specified character.
 int	indexOf(String str, int fromIndex)
          Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.
 int	indexOf(String str)
          Returns the index within this string of the first occurrence of the specified substring.
 String	intern()
          Returns a canonical representation for the string object.
 int	lastIndexOf(int ch, int fromIndex)
          Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index.
 int	lastIndexOf(int ch)
          Returns the index within this string of the last occurrence of the specified character.
 int	lastIndexOf(String str, int fromIndex)
          Returns the index within this string of the last occurrence of the specified substring.
 int	lastIndexOf(String str)
          Returns the index within this string of the rightmost occurrence of the specified substring.
 int	length()
          Returns the length of this string.
 boolean	regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)
          Tests if two string regions are equal.
 boolean	regionMatches(int toffset, String other, int ooffset, int len)
          Tests if two string regions are equal.
 String	replace(char oldChar, char newChar)
          Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar.
 boolean	startsWith(String prefix, int toffset)
          Tests if this string starts with the specified prefix.
 boolean	startsWith(String prefix)
          Tests if this string starts with the specified prefix.
 String	substring(int beginIndex, int endIndex)
          Returns a new string that is a substring of this string.
 String	substring(int beginIndex)
          Returns a new string that is a substring of this string.
 char[]	toCharArray()
          Converts this string to a new character array.
 String	toLowerCase()
          Converts all of the characters in this String to lower case using the rules of the default locale, which is returned by Locale.getDefault.
 String	toLowerCase(Locale locale)
          Converts all of the characters in this String to lower case using the rules of the given Locale.
 String	toString()
          This object (which is already a string!)
 String	toUpperCase()
          Converts all of the characters in this String to upper case using the rules of the default locale, which is returned by Locale.getDefault.
 String	toUpperCase(Locale locale)
          Converts all of the characters in this String to upper case using the rules of the given locale.
 String	trim()
          Removes white space from both ends of this string.
static String	valueOf(boolean b)
          Returns the string representation of the boolean argument.
static String	valueOf(char c)
          Returns the string representation of the char * argument.
static String	valueOf(char[] data, int offset, int count)
          Returns the string representation of a specific subarray of the char array argument.
static String	valueOf(char[] data)
          Returns the string representation of the char array argument.
static String	valueOf(double d)
          Returns the string representation of the double argument.
static String	valueOf(float f)
          Returns the string representation of the float argument.
static String	valueOf(int i)
          Returns the string representation of the int argument.
static String	valueOf(long l)
          Returns the string representation of the long argument.
static String	valueOf(Object obj)
          Returns the string representation of the Object argume
