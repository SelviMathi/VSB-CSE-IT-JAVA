What is OOPS?

Object-oriented programming (OOP) is a programming model that uses classes and objects to create software programs.


Why is OOPS?

 Modular Code: Divides code into objects and classes.
 Reusability: Inheritance allows code reuse.
 Scalability: New features can be added easily.
 Security: Encapsulation restricts direct access to data.

Classes: A blueprint or template that defines the structure and behavior of objects 

Objects: An instance of a class, representing a specific entity with its own set of attributes and behaviors

Access Modifiers:

Private: Accessible only within the class.
Default (no modifier): Accessible within the same package.
Protected: Accessible within the same package and subclasses.
Public: Accessible from any other class.

Static Keyword:

Static Variables: Belong to the class rather than any object instance.
Static Methods: Can be called without creating an instance of the class

***********************Class with Single object

import java.util.*;
class Student
{
    public int id;
    public String name;

}

public class Main
{	
public static void main(String[] args) {
	    
	    Student s1=new Student();
	    
	    s1.id=1;
	    s1.name="Roshan";
	    System.out.println(s1.id+"->"+s1.name);
	    
	}
}

**********************Class with multiple objects

import java.util.*;
class Student
{
    public int id;
    public String name;

}

public class Main
{	
public static void main(String[] args) {
	    
	    Student s1=new Student();
	    s1.id=1;//create Scanner obj and get input
	    s1.name="Roshan";
	    System.out.println(s1.id+"->"+s1.name);
	    Student s2=new Student();
	    s2.id=2;
	    s2.name="Rohit";
	    System.out.println(s2.id+"->"+s2.name);
	    
	}
}

*******************Class with mulitple objects Using Array
import java.util.*;
class Student
{
    public int id;
    public String name;

}

public class Main
{	
public static void main(String[] args) {
	    
	    Student[] s=new Student[2];
	    s[0]=new Student();
	    s[0].id=1;
	    s[0].name="Roshan";
	    System.out.println(s[0].id+"->"+s[0].name);
	    s[1]=new Student();
	    s[1].id=2;
	    s[1].name="Rohit";
	    System.out.println(s[1].id+"->"+s[1].name);
	    
	}
}
***************************Class with mulitple objects Using ArrayList

import java.util.*;

class Student {
    public int id;
    public String name;
}

public class Main {
    public static void main(String[] args) {
        List<Student> studentList = new ArrayList<>();

        Student s1 = new Student();
        s1.id = 1;
        s1.name = "Roshan";
        studentList.add(s1);

        Student s2 = new Student();
        s2.id = 2;
        s2.name = "Rohit";
        studentList.add(s2);

        for (Student s : studentList) {
            System.out.println(s.id + " -> " + s.name);
        }
    }
}

Constructor:
It has the same name as the class and does not have a return type. A constructor is called automatically when an object of the class is created.

Types of Constructors
Default Constructor (No-Argument Constructor)
Parameterized Constructor
copy constructor


class ADD {
    ADD() //Default constructor
    {
    System.out.println(30);
    }
    ADD(int a) //Parametrise constructor
    {
        System.out.println(a+30);
    }
    ADD(ADD obj)//Copy contructor
    {
        System.out.println("Copy contructor called");
    }
    
}
public class Main {
    public static void main(String[] args) {
       
        ADD ob=new ADD(10);
        ADD ob1=new ADD();
        ADD ob2=new ADD(ob1);
        
    }
}
******Encapsulation: The idea that some components of an object should be restricted from direct access******* 

Example:

class exam
{
   private int x;
   public void set(int num)
   {
      x=num;
   }
   public void get()
   {
       System.out.println(x);
   }
}

public class Main
{
	public static void main(String[] args) {
	    int a=10;
	    	   exam ob1=new exam();
	    	   ob1.set(a);
	    	   ob1.get();
	    
		
	}
}
*********this Keyword**********
class exam
{
   private int x;
   public void set(int x)
   {
     this.x=x;
   }
   public void get()
   {
       System.out.println(x);
   }
}

public class Main
{
	public static void main(String[] args) {
	    int a=10;
	    	   exam ob1=new exam();
	    	   ob1.set(a);
	    	   ob1.get();
	    
		
	}
}

Inheritance
Inheritance is one of the key concepts in Object-Oriented Programming (OOP). It allows a child class (subclass) to acquire the properties and behaviors (fields and methods) of a parent class (superclass). This promotes code reusability and hierarchical relationships between classes.

Single Inheritance → One class inherits another.

Multi-level Inheritance → A class inherits another, which inherits another.

Hierarchical Inheritance → Multiple classes inherit from one base class.

Hybrid Inheritance → Combination of multiple inheritance types. (Not directly supported in Java due to ambiguity issues.)



Why Java Does Not Support Multiple Inheritance?
Java does not support multiple inheritance with classes because it causes the Diamond Problem (method ambiguity if inherited from two classes with the same method). Instead, Java supports multiple inheritance through interfaces.

Polymorphism:
Polymorphism allows objects to be treated as instances of their parent class rather than their actual class. This means a single function can process objects differently based on their class.
Method Overloading (Compile-time Polymorphism)
Multiple methods in the same class with the same name but different parameters.
 Method Overriding (Run-time Polymorphism)
A subclass provides a specific implementation of a method already defined in its superclass


Abstraction
abstract class shape
{
double dim1,dim2;
shape(double d1,double d2)
{
    dim1=d1;
    dim2=d2;
}
abstract double Area();
void display(){
    System.out.println("Calculating....");
}
}

class rect extends shape
{
rect(double h,double l)
{
    super(h,l);
}
double Area()
{
    return dim1*dim2;
}
}
public class Abst {
public static void main(String[] args) {
rect ob=new rect(2,3);
ob.display();
System.out.println(ob.Area());
}
}


interface

interface vehicle
{
    void start();
}
class car implements vehicle{
    public void start()
    {
System.out.println("Car started");
    }
}
class bike implements vehicle{
    public void start()
    {
System.out.println("Bike started");
    }
}
public class inte {
    public static void main(String[] args) {
        
vehicle ob=new car();
ob.start();
vehicle ob1=new bike();
ob1.start();
    }
}

**********Create a class 'Parent'. 'Parent' class should have a method 'add' which prints the addition of 2 integers. Create a class 'child1' which should be a 'child' class of 'parent' class.it has a method 'sub' which prints subtraction of 2 integers. Create a class 'child2' which should be a child class of 'Parent' class. 'Child2' class should have a method 'mul' which prints multiplication of 2 integers. Create a class 'child3' which should be a child class of 'child1' class and 'child2' class. 'Child3' class should have a method 'div' which prints the division of 2 integers. Create an object for a 'Child3' class. Call the 4 methods to add, sub, mul, and div from the child1 class object and display the result.************

MULITPLE INHERITANCE USING INTERFACE
import java.util.Scanner;

// Parent class
class Parent {
    void add(int a, int b) {
        System.out.println(a + b);
    }
}

// First child class extending Parent
class Child1 extends Parent {
    void sub(int a, int b) {
        super.add(a, b); // Calling the add method from Parent
        System.out.println(a - b);
    }
}

// Second child class extending Parent
class Child2 extends Parent {
    void mul(int a, int b) {
        System.out.println(a * b);
    }
}

// Interface to simulate multiple inheritance
interface Multiply {
    void mul(int a, int b);
}

// Third child class extending Child1 and implementing Multiply
class Child3 extends Child1 implements Multiply {
    @Override
    public void mul(int a, int b) {
        System.out.println(a * b);
    }

    void divi(int a, int b) {
        System.out.println(a / b);
    }
}

// Main class
public class HybridInheritanceExample {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();

        Child3 c = new Child3();
        c.sub(a, b);
        c.mul(a, b);
        c.divi(a, b);

        sc.close();
    }
}


1. Definition:
Abstract Class: A class that can have both implemented and abstract (unimplemented) methods.
Interface: A blueprint that contains only abstract methods (before Java 8) or default/static methods (from Java 8).
2. Usage:
Abstract Class: Used when multiple related classes share common behavior.
Interface: Used when multiple classes (even unrelated) must follow a common contract.
3. Methods:
Abstract Class: Can have both implemented and abstract methods.
Interface: Before Java 8, only abstract methods; from Java 8, can have default and static methods.
4. Variables:
Abstract Class: Can have instance variables (normal and static).
Interface: Only public, static, and final variables (constants).
5. Inheritance:
Abstract Class: Supports single inheritance (A class can extend only one abstract class).
Interface: Supports multiple inheritance (A class can implement multiple interfaces).
6. Constructor:
Abstract Class: Can have constructors.
Interface: Cannot have constructors (cannot be instantiated).
7. Access Modifiers:
Abstract Class: Can have any access modifier (public, private, protected, default).
Interface: Methods are public and abstract by default.
8. When to Use?
Abstract Class → When classes are related and share some behavior.
Interface → When classes are unrelated but need a common ability.
